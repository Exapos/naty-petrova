// Prisma schema for Next.js admin/blog app with PostgreSQL
// Run: npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  posts     BlogPost[]
  sessions  UserSession[]
}

enum Role {
  ADMIN
  EDITOR
}

model BlogPost {
  id            String   @id @default(uuid())
  title         String
  slug          String   @unique
  content       String
  excerpt       String?
  featuredImage String?
  metaTitle     String?
  metaDescription String?
  keywords      String?
  author        User?    @relation(fields: [authorId], references: [id])
  authorId      String?
  published     Boolean  @default(false)
  editorMode    String?  @default("wysiwyg")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Reference {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  location    String
  description String
  category    String
  image       String
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserSession {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  userAgent String?
  ipAddress String?
  location  String?
  isActive  Boolean  @default(true)
  lastActivity DateTime @default(now())
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model JobPosition {
  id               String            @id @default(uuid())
  title            String
  slug             String            @unique
  location         String
  type             JobType
  department       String
  shortDescription String
  description      String
  requirements     String?
  benefits         String?
  salary           String?
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  applications     JobApplication[]
}

model JobApplication {
  id             String       @id @default(uuid())
  jobPositionId  String
  jobPosition    JobPosition  @relation(fields: [jobPositionId], references: [id], onDelete: Cascade)
  firstName      String
  lastName       String
  email          String
  phone          String?
  coverLetter    String
  resumeUrl      String?
  status         ApplicationStatus @default(NEW)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum ApplicationStatus {
  NEW
  REVIEWED
  INTERVIEW
  REJECTED
  ACCEPTED
}

model Settings {
  id                  String   @id @default(uuid())
  key                 String   @unique
  value               String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}
